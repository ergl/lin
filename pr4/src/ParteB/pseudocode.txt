mutex mtx;
struct kfifo cbuffer;
condvar writers, readers;
int writer_opens, reader_opens = 0;

// Rendezvous with other side
void open(bool reading) {
     lock(mtx);

     if (reading) {
        reader_opens++;

        cond_signal(writers);
        while (writers_opens == 0) {
            cond_wait(readers, mtx)
        }

    } else {
        writer_opens++;

        cond_signal(readers);
        while (reader_opens == 0) {
            cond_wait(writers, mtx);
        }
    }

    unlock(mtx);
}

void release(bool reading) {
    lock(mtx);

    if (reading) {
        reader_opens--;
        cond_signal(writers);
        if (reader_opens == 0 && writer_opens == 0) {
            kfifo_reset(&cbuffer);
        }
    } else {
        writer_opens--;
        cond_signal(readers);
        if (reader_opens == 0 && writer_opens == 0) {
            kfifo_reset(&cbuffer);
        }
    }

    unlock(mtx);
}

int write(char *buffer, int len) {
    char kbuffer[MAX_KBUF]

    if (len > MAX_BUFFER_SIZE || len > MAX_FIFO_SIZE) {
        return -ENOSPC;
    }

    if (copy_from_user(kbuffer, buffer, len)) {
        return -EFAULT;
    }

    lock(mtx);

    while (kfifo_avail(&cbuffer) < len && reader_opens > 0) {
        cond_wait(writers, mtx);
    }

    if (reader_opens == 0) {
        unlock(mtx);
        return -EPIPE;
    }

    kfifo_in(&cbuffer, kbuffer, len);

    cond_signal(readers);

    unlock(mtx);

    return len;
}

int read(const char *buffer, int len) {
    char kbuffer[MAX_KBUF]

    if (len > MAX_BUFFER_SIZE || len > MAX_FIFO_SIZE) {
        return -ENOSPC;
    }

    lock(mtx);

    while (kfifo_len(&cbuffer) < len && writer_opens > 0) {
        cond_wait(readers, mtx);
    }

    // Different with reads, just return an empty buffer
    if (writer_opens == 0 && kfifo_is_empty(&cbuffer)) {
        unlock(mtx);
        return 0;
    }

    kfifo_out(&cbuffer, kbuffer, len);

    cond_signal(writers);

    unlock(mtx);

    if (copy_from_user(kbuffer, bufer, len)) {
        return -EFAULT;
    }

    return len;
}
